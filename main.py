import csv
import os
import random
import re
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiohttp import web
import json
from aiogram.utils.keyboard import InlineKeyboardBuilder

builder = InlineKeyboardBuilder()
for opt in question["options"]:
    builder.button(text=opt, callback_data=opt)

# üëá –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∏–¥—Ç–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
builder.adjust(1)

await message.answer(
    text=question["question"],
    reply_markup=builder.as_markup()
)



BOT_TOKEN = os.getenv("BOT_TOKEN")

from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

QUESTIONS_PATH = "questions.csv"
SESSIONS_PATH = "sessions.json"

def load_questions_from_csv(path: str):
    import csv, re, os, random

    if not os.path.exists(path):
        return []

    # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    for enc in ("utf-8", "utf-8-sig", "cp1251"):
        try:
            with open(path, encoding=enc, newline="") as f:
                reader = csv.DictReader(f, delimiter=";")
                rows = list(reader)
                break
        except Exception:
            continue
    else:
        return []

    out = []
    for row in rows:
        q = (row.get("question") or row.get("–≤–æ–ø—Ä–æ—Å") or "").strip()
        opts_field = (row.get("options") or row.get("–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤") or "").strip()
        qtype = (row.get("type") or row.get("—Ç–∏–ø") or "single").strip().lower()
        if not q or not opts_field or "question" in q.lower():
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–ø–∫—É
            continue
        # –¥–µ–ª–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ | ; ,
        options = [o.strip() for o in re.split(r"[|;,]", opts_field) if o.strip()]
        out.append({"type": qtype, "question": q, "options": options})
    return out

    # ---- —ç–º–æ–¥–∑–∏-–ø–æ–¥–±–æ—Ä, –∫–∞–∫ —Ä–∞–Ω—å—à–µ ----
    emoji_groups = {
        "–æ—Ç–Ω–æ—à": "üíï", "–ª—é–±": random.choice(["‚ù§Ô∏è", "üíå", "üíê", "üåπ", "üíû"]),
        "—á—É–≤—Å—Ç–≤": random.choice(["üíñ", "üíò", "üíó"]), "–ø–æ—Ü–µ–ª": "üòò", "–¥—Ä—É–∑": "üë´", "–æ–±—ä—è—Ç": "ü§ó",
        "—Ä–∞–±–æ—Ç": "üíº", "–æ—Ñ–∏—Å": "üè¢", "–Ω–∞—á–∞–ª—å": "üëî", "–¥–µ–Ω—å–≥–∏": "üí∞", "–ø—Ä–æ–µ–∫—Ç": "üìä",
        "–µ–¥–∞": "üçΩÔ∏è", "–∫—É—à": "üç≤", "–∑–∞–≤—Ç—Ä": "‚òï", "–æ–±–µ–¥": "ü•ó", "—É–∂–∏–Ω": "üçù", "–∫–æ—Ñ": "‚òï", "—á–∞–π": "üçµ",
        "—Å–ø–æ—Ä—Ç": "üèÉ", "–±–µ–≥": "üèÉ‚Äç‚ôÄÔ∏è", "—Ç—Ä–µ–Ω": "üí™", "—Ñ–∏—Ç–Ω–µ—Å": "üèãÔ∏è", "–≤–µ–ª–æ": "üö¥",
        "–æ—Ç–¥—ã—Ö": "üåô", "—Å–æ–Ω": "üò¥", "—Ä–µ–ª–∞–∫—Å": "üßò",
        "–ø—É—Ç–µ—à–µ": "üß≥", "–ø–æ–µ–∑–¥": "üöÜ", "–æ—Ç–ø—É—Å–∫": "üèñÔ∏è", "–º–æ—Ä–µ": "üåä",
        "–∂–∏–≤–æ—Ç": "üê∂", "–∫–æ—Ç": "üê±", "—Å–æ–±–∞–∫": "üêï", "–ø–∏—Ç–æ–º": "üêæ",
        "—Ö–æ–±–±–∏": "üé®", "—É–≤–ª–µ—á": "üéØ", "–º—É–∑—ã–∫": "üéµ", "—Ñ–∏–ª—å–º": "üé¨", "–∫–Ω–∏–≥": "üìö",
        "—é–º–æ—Ä": "üòÇ", "—à—É—Ç": "ü§£", "—Å–º–µ—Ö": "üòÑ"
    }
    neutral_emojis = ["üí≠", "üåü", "üéà", "üéâ", "üí¨", "üéµ", "üí´", "üåà", "‚ú®"]

    def pick_emoji(text: str) -> str:
        t_lower = text.lower()
        for key, emo in emoji_groups.items():
            if re.search(key, t_lower):
                return emo
        return random.choice(neutral_emojis)

    # ---- —á–∏—Ç–∞–µ–º —Å –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç–æ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è ----
    rows = None
    dialect = None
    for enc in ("utf-8", "utf-8-sig", "cp1251"):
        try:
            with open(path, "r", encoding=enc, newline="") as f:
                sample = f.read(2048)
                f.seek(0)
                try:
                    dialect = csv.Sniffer().sniff(sample, delimiters=";,")
                except csv.Error:
                    class Dialect(csv.excel):
                        delimiter = ";"
                    dialect = Dialect()
                reader = csv.reader(f, dialect)
                rows = list(reader)
                break
        except UnicodeDecodeError:
            continue

    if not rows:
        return []

    # ---- –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ ----
    header = [h.strip().lower().lstrip("\ufeff") for h in rows[0]]

    def find_idx(candidates):
        for name in candidates:
            if name in header:
                return header.index(name)
        return None

    qi = find_idx(["question", "–≤–æ–ø—Ä–æ—Å"])
    oi = find_idx(["options", "–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"])
    ti = find_idx(["type", "—Ç–∏–ø"])

    out = []
    for r in rows[1:]:
        if not r:
            continue
        q = (r[qi] if qi is not None and qi < len(r) else "").strip()
        opts_field = (r[oi] if oi is not None and oi < len(r) else "").strip()
        qtype = (r[ti] if ti is not None and ti < len(r) else "single").strip().lower()
        if not q or not opts_field:
            continue

        # –¥–µ–ª–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ | ; –∏–ª–∏ , (—á—Ç–æ –±—ã –Ω–∏ –ø—Ä–∏—Å–ª–∞–ª–∞ Excel/Numbers/Google)
        options_raw = [o.strip() for o in re.split(r"\s*\|\s*|\s*;\s*|\s*,\s*", opts_field) if o.strip()]

        # –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –≤–æ–ø—Ä–æ—Å—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        q_emoji = pick_emoji(q)
        options = []
        for o in options_raw:
            emo = pick_emoji(o)
            if emo not in o:
                o = f"{emo} {o}"
            options.append(o)

        out.append({"type": qtype, "question": f"{q_emoji} {q}", "options": options})

    return out
questions = load_questions_from_csv(QUESTIONS_PATH)

class Quiz(StatesGroup):
    role = State()
    code = State()
    name_a = State()
    name_b = State()
    q = State()

def load_sessions():
    if os.path.exists(SESSIONS_PATH):
        with open(SESSIONS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_sessions(s):
    with open(SESSIONS_PATH, "w", encoding="utf-8") as f:
        json.dump(s, f, ensure_ascii=False, indent=2)

def equal(q, a, b):
    return a == b

def opt_text(q, ans):
    if ans is None:
        return "‚Äî"
    opts = q["options"]
    try:
        idx = int(ans)
        return opts[idx]
    except:
        return str(ans)

@dp.message(CommandStart())
async def start_cmd(msg: Message, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="üéØ –ü—Ä–æ–π—Ç–∏ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫", callback_data="first")
    kb.button(text="üíû –ü—Ä–æ–π—Ç–∏ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫", callback_data="second")
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! ü•∞ –≠—Ç–æ —Ç–µ—Å—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π."
                     "–û–¥–∏–Ω –∏–∑ –≤–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ–≥–æ –ø–µ—Ä–≤—ã–º, –∞ –≤—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–º –≤–≤–æ–¥–∏—Ç –∫–æ–¥."
                     "–ö—Ç–æ —Ç—ã?", reply_markup=kb.as_markup())

@dp.callback_query(F.data.in_({"first","second"}))
async def pick_role(call: types.CallbackQuery, state: FSMContext):
    role = call.data
    await state.update_data(role=role)
    if role == "first":
        code = str(random.randint(1000, 9999))
        await state.update_data(code=code)
        await call.message.answer(f"üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (–∫–æ–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: <code>{code}</code>)")
    else:
        await call.message.answer("üí¨ –í–≤–µ–¥–∏ –∫–æ–¥ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")

@dp.message(F.text.regexp(r"^\d{4}$"))
async def got_code(msg: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("role") != "second":
        return
    code = msg.text.strip()
    await state.update_data(code=code)
    await msg.answer("üí¨ –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")

@dp.message(F.text)
async def got_name(msg: Message, state: FSMContext):
    data = await state.get_data()
    role = data.get("role")
    if not role:
        return
    if role == "first":
        await state.update_data(name_a=msg.text.strip(), answers={})
    else:
        await state.update_data(name_b=msg.text.strip(), answers={})
    await ask_question(msg, state, 0)

async def ask_question(msg: Message, state: FSMContext, idx: int):
    if idx >= len(questions):
        await finish(msg, state)
        return
    q = questions[idx]
    kb = InlineKeyboardBuilder()
    for i, opt in enumerate(q["options"]):
        kb.button(text=opt, callback_data=f"ans_{idx}_{i}")
    await msg.answer(f"<b>{q['question']}</b>", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("ans_"))
async def answer(call: types.CallbackQuery, state: FSMContext):
    _, idx, ans = call.data.split("_")
    idx, ans = int(idx), int(ans)
    data = await state.get_data()
    answers = data.get("answers", {})
    answers[str(idx)] = ans
    await state.update_data(answers=answers)
    await call.message.edit_reply_markup()
    await ask_question(call.message, state, idx + 1)

async def finish(msg: Message, state: FSMContext):
    data = await state.get_data()
    role = data.get("role")
    code = data.get("code")
    answers = data.get("answers", {})
    sessions = load_sessions()

    if role == "first":
        s = sessions.get(code, {})
        s["answers_a"] = answers
        s["name_a"] = data.get("name_a", "")
        sessions[code] = s
        save_sessions(sessions)
        await msg.answer(f"üíå –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ: <code>{code}</code>")
    else:
        s = sessions.get(code)
        if not s:
            await msg.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        s["answers_b"] = answers
        s["name_b"] = data.get("name_b", "")
        sessions[code] = s
        save_sessions(sessions)

        hits = 0
        total = len(questions)
        body_lines = []

        for i, q in enumerate(questions):
            a = s["answers_a"].get(str(i))
            b = answers.get(str(i))
            ok = equal(q, a, b)
            hits += 1 if ok else 0
            mark = "‚ù§Ô∏è –°–æ–≤–ø–∞–ª–æ!" if ok else "üíî –ü–æ-—Ä–∞–∑–Ω–æ–º—É"
            prefix = "üí≠" if ok else "ü§î"
            body_lines.append(
                f"{prefix} <b>{q['question']}</b>\n"
                f"‚Äî üíï {s.get('name_a', '–ü–µ—Ä–≤—ã–π')}: {opt_text(q, a)}\n"
                f"‚Äî üíô {s.get('name_b', '–í—Ç–æ—Ä–æ–π')}: {opt_text(q, b)}\n"
                f"{mark}\n"
            )

        percent = int((hits / total) * 100) if total > 0 else 0

        if percent >= 85:
            emotional = "üåπ –í–∞—à–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–∞ ‚Äî –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ–∑ —Å–ª–æ–≤ üíû"
        elif percent >= 60:
            emotional = "üíñ –ú–µ–∂–¥—É –≤–∞–º–∏ —Ö–æ—Ä–æ—à–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å ‚Äî –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –¥–∞–∂–µ –≤ —Ç–∏—à–∏–Ω–µ üòä"
        elif percent >= 40:
            emotional = "üí´ –ï—Å—Ç—å –æ—Ç–∫–ª–∏–∫, –Ω–æ –≤—ã –µ—â—ë –∏–∑—É—á–∞–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä –¥—Ä—É–≥ –¥—Ä—É–≥–∞ üåô"
        else:
            emotional = "üíî –ü–æ–∫–∞ –±–ª–∏–∑–æ—Å—Ç—å —Ö—Ä—É–ø–∫–∞—è, –Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –≤—Å—ë –∏–∑–º–µ–Ω–∏—Ç—å üå±"

        if percent >= 85:
            summary_line = f"üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: <b>{percent}%</b> ‚Äî –≤—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞! üåπ"
        elif percent >= 60:
            summary_line = f"üíñ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: <b>{percent}%</b> ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è –ø–∞—Ä–∞, —Ä–∞–∑–ª–∏—á–∏—è —Ç–æ–ª—å–∫–æ —É–∫—Ä–∞—à–∞—é—Ç üòÑ"
        elif percent >= 40:
            summary_line = f"üí´ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: <b>{percent}%</b> ‚Äî –Ω–µ–ø–ª–æ—Ö–æ, –Ω–æ –≤—ã —Ä–∞–∑–Ω—ã–µ ‚Äî –∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòâ"
        else:
            summary_line = f"üíî –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: <b>{percent}%</b> ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—Ç—Å—è üòÖ"

        header = "ü•∞ <b>–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å!</b>\n–ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ üí´\n\n"
        summary = f"{summary_line}\n{emotional}\n\n‚ù§Ô∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>{hits}</b> –∏–∑ <b>{total}</b>\n\n"
        text = header + summary + "\n".join(body_lines)

        for chunk in [text[i:i+3500] for i in range(0, len(text), 3500)]:
            await msg.answer(chunk, parse_mode="HTML")

    await state.clear()

async def handle(request):
    body = await request.json()
    await dp.feed_update(bot, types.Update(**body))
    return web.Response()

app = web.Application()
app.router.add_post("/webhook", handle)

async def on_startup(_):
    await bot.set_webhook(os.getenv("RENDER_EXTERNAL_URL") + "/webhook")

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
