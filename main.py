# -*- coding: utf-8 -*-
# MatchQuiz_bot ‚Äî —Ç–µ—Å—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Render)

import os
import csv
import re
import random
import asyncio
from typing import List, Dict, Any
from aiohttp import web

from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/") + "/webhook"
QUESTIONS_CSV = os.getenv("QUESTIONS_CSV", "questions.csv")

# ---------- FSM ----------
class Flow(StatesGroup):
    name = State()
    code = State()
    quiz = State()
    role = State()


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
def load_questions_from_csv(path: str) -> List[Dict[str, Any]]:
    if not os.path.exists(path):
        return []
    questions = []
    with open(path, encoding="utf-8-sig") as f:
        reader = csv.DictReader(f)
        next(reader, None)  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for row in reader:
            q = row.get("question", "").strip()
            opts = row.get("options", "").strip()
            if not q or not opts:
                continue
            options = [o.strip() for o in re.split(r"[;,]", opts) if o.strip()]
            questions.append({"question": q, "options": options})
    return questions


# ---------- –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ----------
EMOJI_TOPICS = {
    "—É—Ç—Ä–æ–º": "üåÖ",
    "—Ä–∞–±–æ—Ç–∞": "üíº",
    "—é–º–æ—Ä": "üòÇ",
    "–º—É–∑—ã–∫–∞": "üéµ",
    "—Ü–µ–Ω–Ω–æ—Å—Ç–∏": "üíé",
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": "üíû",
}

def add_emoji_to_question(text: str) -> str:
    for word, emoji in EMOJI_TOPICS.items():
        if word.lower() in text.lower():
            return f"{emoji} {text}"
    return f"‚ú® {text}"


# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π ----------
sessions: Dict[str, Dict[str, Any]] = {}
router = Router()


# ---------- –°—Ç–∞—Ä—Ç ----------
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="üéØ –ü—Ä–æ–π—Ç–∏ –∫–∞–∫ –ø–µ—Ä–≤—ã–π", callback_data="start_first")
    kb.button(text="üíû –ü—Ä–æ–π—Ç–∏ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π", callback_data="start_second")
    kb.adjust(2)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! ü•∞ –≠—Ç–æ —Ç–µ—Å—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –û–¥–∏–Ω –∏–∑ –≤–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ–≥–æ –ø–µ—Ä–≤—ã–º, –∞ –≤—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–º –≤–≤–æ–¥–∏—Ç –∫–æ–¥. –ö—Ç–æ —Ç—ã?",
        reply_markup=kb.as_markup(),
    )


@router.callback_query(F.data.startswith("start_"))
async def start_role(cb: types.CallbackQuery, state: FSMContext):
    role = cb.data.split("_")[1]
    if role == "first":
        code = str(random.randint(1000, 9999))
        sessions[code] = {"a": {}, "b": {}, "questions": load_questions_from_csv(QUESTIONS_CSV)}
        await state.update_data(role="first", code=code, role_key="a")
        await cb.message.answer(f"üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (–∫–æ–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {code})")
        await state.set_state(Flow.name)
    else:
        await state.update_data(role="second", role_key="b")
        await cb.message.answer("üí¨ –í–≤–µ–¥–∏ –∫–æ–¥ –ø–∞—Ä—ã (4 —Ü–∏—Ñ—Ä—ã)")
        await state.set_state(Flow.code)
    await cb.answer()


# ---------- –í–≤–æ–¥ –∫–æ–¥–∞ ----------
@router.message(Flow.code)
async def input_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    if code not in sessions:
        await message.answer("‚ö†Ô∏è –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôÇ")
        return
    await state.update_data(code=code)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòä")
    await state.set_state(Flow.name)


# ---------- –ò–º—è ----------
@router.message(Flow.name)
async def input_name(message: types.Message, state: FSMContext):
    name = message.text.strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    data = await state.get_data()
    role = data.get("role", "first")
    role_key = data.get("role_key", "a")
    code = data.get("code")

    session = sessions.get(code)
    if not session:
        session = {"a": {}, "b": {}, "questions": load_questions_from_csv(QUESTIONS_CSV)}
        sessions[code] = session

    session[role_key]["name"] = name
    session[role_key]["answers"] = []
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! üöÄ –ü–æ–µ—Ö–∞–ª–∏!")

    await ask_question(message, state, session, code, role_key, 0)


# ---------- –í–æ–ø—Ä–æ—Å—ã ----------
async def ask_question(message, state, session, code, role_key, index):
    questions = session["questions"]
    if index >= len(questions):
        await finish_quiz(message, state, session, code, role_key)
        return

    q = questions[index]
    question_text = add_emoji_to_question(q["question"])

    kb = InlineKeyboardBuilder()
    for opt in q["options"]:
        kb.button(text=opt, callback_data=f"answer:{index}:{opt}")
    kb.adjust(1)

    await message.answer(
        f"üåÄ –í–æ–ø—Ä–æ—Å {index+1}/{len(questions)}:
<b>{question_text}</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )


# ---------- –û—Ç–≤–µ—Ç ----------
@router.callback_query(F.data.startswith("answer:"))
async def process_answer(cb: types.CallbackQuery, state: FSMContext):
    _, idx, opt = cb.data.split(":", 2)
    idx = int(idx)
    data = await state.get_data()
    code = data.get("code")
    role_key = data.get("role_key", "a")
    session = sessions.get(code)
    if not session:
        await cb.answer("–û—à–∏–±–∫–∞! –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    session[role_key]["answers"].append(opt)
    await cb.answer("‚úÖ")
    await cb.message.delete()
    await ask_question(cb.message, state, session, code, role_key, idx + 1)


# ---------- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ----------
async def finish_quiz(message, state, session, code, role_key):
    role_other = "b" if role_key == "a" else "a"
    if not session.get(role_other):
        await message.answer("–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞... üí´")
        return

    a, b = session["a"], session["b"]
    qa = a.get("answers", [])
    qb = b.get("answers", [])
    qs = session["questions"]

    total = len(qs)
    same = sum(1 for i in range(min(len(qa), len(qb))) if qa[i] == qb[i])
    percent = int(same / total * 100)

    if percent > 80:
        text = "üíû –£—Ä–æ–≤–µ–Ω—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤—ã—Å–æ–∫–∏–π! –ú–µ–∂–¥—É –≤–∞–º–∏ —Å–∏–ª—å–Ω–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å ‚ù§Ô∏è"
    elif percent > 50:
        text = "üòä –£ –≤–∞—Å –º–Ω–æ–≥–æ –æ–±—â–µ–≥–æ, –Ω–æ –µ—Å—Ç—å –∏ —Ä–∞–∑–ª–∏—á–∏—è ‚Äî –∫–∞–∫ –≤ —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö üåà"
    else:
        text = "üåÄ –í—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ üí´"

    result = [f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:</b>
–°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {same} –∏–∑ {total} ({percent}%)", text, "
<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>"]

    for i, q in enumerate(qs):
        result.append(f"
<b>{i+1}. {q['question']}</b>
‚Äî {a['name']}: {qa[i] if i < len(qa) else '‚Äî'}
‚Äî {b['name']}: {qb[i] if i < len(qb) else '‚Äî'}")

    await message.answer("
".join(result), parse_mode="HTML")


# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    async def on_startup(bot: Bot):
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        print(f"Webhook set to {WEBHOOK_URL}")

    async def on_shutdown(bot: Bot):
        await bot.delete_webhook()

    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)

    await on_startup(bot)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    print("‚úÖ Bot is running...")
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())
