# -*- coding: utf-8 -*-
# MatchQuiz bot ‚Äì —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è questions.csv
# aiogram 3.x webhook mode for Render

import os
import csv
import re
import random
from typing import Dict, Any, List, Optional
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/") + "/webhook"
QUESTIONS_CSV = os.getenv("QUESTIONS_CSV", "questions.csv")

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ----------
def load_questions_from_csv(path: str) -> List[Dict[str, Any]]:
    if not os.path.exists(path):
        return []

    rows = None
    for enc in ("utf-8-sig", "utf-8", "cp1251"):
        try:
            with open(path, "r", encoding=enc, newline="") as f:
                sample = f.read(4096)
                f.seek(0)
                try:
                    dialect = csv.Sniffer().sniff(sample, delimiters=";,")
                except csv.Error:
                    class Dialect(csv.excel):
                        delimiter = ";"
                    dialect = Dialect()
                reader = csv.reader(f, dialect)
                rows = list(reader)
                break
        except UnicodeDecodeError:
            continue

    if not rows:
        return []

    header = [h.strip().lower().lstrip("\ufeff") for h in rows[0]]

    def find_idx(cands: List[str]) -> Optional[int]:
        for c in cands:
            if c in header:
                return header.index(c)
        return None

    qi = find_idx(["question", "–≤–æ–ø—Ä–æ—Å"])
    oi = find_idx(["options", "–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"])
    ti = find_idx(["type", "—Ç–∏–ø"])

    out = []
    for r in rows[1:]:
        if not r:
            continue
        q = (r[qi] if qi is not None and qi < len(r) else "").strip()
        opts_field = (r[oi] if oi is not None and oi < len(r) else "").strip()
        qtype = (r[ti] if ti is not None and ti < len(r) else "single").strip().lower()

        if not q or q.lower() in ("question", "–≤–æ–ø—Ä–æ—Å"):
            continue

        options_raw = [o.strip() for o in re.split(r"\s*\|\s*|\s*;\s*|\s*,\s*", opts_field) if o.strip()]
        if not options_raw:
            continue

        out.append({"type": qtype, "question": q, "options": options_raw})
    return out

questions = load_questions_from_csv(QUESTIONS_CSV)

# ---------- –≠–º–æ–¥–∑–∏ ----------
EMOJIS = ["üåû","‚òï","üçÄ","üí´","üéØ","‚ù§Ô∏è","üí≠","üå∏","üî•","üéµ","‚ú®","üåà","üìö","üéÅ","üåπ","üåô","üç∑","ü§ç","üí¨","üåª"]
def emojify(text: str, idx: int) -> str:
    return f"{EMOJIS[idx % len(EMOJIS)]} {text}"

# ---------- –ü–∞–º—è—Ç—å ----------
sessions: Dict[str, Dict[str, Any]] = {}

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------
class Flow(StatesGroup):
    role = State()
    name = State()
    code = State()
    idx = State()
    role_key = State()

# ---------- –ë–æ—Ç ----------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_start():
    b = InlineKeyboardBuilder()
    b.button(text="üéØ –ü—Ä–æ–π—Ç–∏ –∫–∞–∫ –ø–µ—Ä–≤—ã–π", callback_data="role:first")
    b.button(text="üíû –ü—Ä–æ–π—Ç–∏ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π", callback_data="role:second")
    b.adjust(2)
    return b.as_markup()

def kb_answers(qidx: int, options: List[str], code: str, role_key: str):
    b = InlineKeyboardBuilder()
    for i, opt in enumerate(options):
        b.button(text=opt, callback_data=f"ans:{code}:{role_key}:{qidx}:{i}")
    b.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return b.as_markup()

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def gen_code() -> str:
    return f"{random.randint(1000, 9999)}"

def ensure_session(code: str):
    if code not in sessions:
        sessions[code] = {"a": {"name": "", "answers": []},
                          "b": {"name": "", "answers": []}}

def calc_result(code: str):
    s = sessions.get(code, {})
    a = s.get("a", {})
    b = s.get("b", {})
    qa, qb = a.get("answers", []), b.get("answers", [])
    matches, pairs = 0, []
    for i in range(min(len(qa), len(qb))):
        ok = qa[i] == qb[i]
        if ok:
            matches += 1
        pairs.append({
            "q": questions[i]["question"],
            "a_opt": questions[i]["options"][qa[i]] if qa[i] < len(questions[i]["options"]) else "",
            "b_opt": questions[i]["options"][qb[i]] if qb[i] < len(questions[i]["options"]) else "",
            "ok": ok
        })
    pct = int(round(100 * matches / max(1, len(pairs))))
    return {"a": a.get("name", ""), "b": b.get("name", ""), "matches": matches, "total": len(pairs), "pct": pct, "pairs": pairs}

async def send_question(chat_id: int, code: str, role_key: str, idx: int):
    if idx >= len(questions):
        # –í—Å—ë ‚Äî —Ç–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω
        res = calc_result(code)
        a_done = len(sessions[code]["a"]["answers"]) >= len(questions)
        b_done = len(sessions[code]["b"]["answers"]) >= len(questions)

        if a_done and b_done:
            pct = res["pct"]

            # üíñ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if pct >= 90:
                summary = "üíû –£ –≤–∞—Å —Ä–µ–¥–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ü–æ—Ö–æ–∂–µ, –º–µ–∂–¥—É –≤–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å ‚Äî –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —Å –ø–æ–ª—É—Å–ª–æ–≤–∞ –∏ –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ üåà"
            elif pct >= 70:
                summary = "üí´ –ú–µ–∂–¥—É –≤–∞–º–∏ –æ—á–µ–Ω—å —Ç—ë–ø–ª–∞—è —Å–≤—è–∑—å. –í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –ø—Ä–æ—Å—Ç–æ –∏–Ω–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–µ—â–∏ —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω ‚ù§Ô∏è"
            elif pct >= 50:
                summary = "üå∑ –ï—Å—Ç—å –æ—Å–Ω–æ–≤–∞ –¥–ª—è –±–ª–∏–∑–æ—Å—Ç–∏ ‚Äî —É –≤–∞—Å –º–Ω–æ–≥–æ –æ–±—â–µ–≥–æ, –Ω–æ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Ç–∞. –ù–µ–º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π ü§ù"
            elif pct >= 30:
                summary = "üåß –ü–æ—Ö–æ–∂–µ, –≤—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —ç–º–æ—Ü–∏–∏ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏. –ù–æ —ç—Ç–æ –Ω–µ –ø–ª–æ—Ö–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∞–º –≤–∞–∂–Ω–æ —á–∞—â–µ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö üí¨"
            else:
                summary = "üíî –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–Ω—ã–µ ‚Äî –∏ –≤ —ç—Ç–æ–º –≤–∞—à–∞ —Å–∏–ª–∞. –ò–Ω–æ–≥–¥–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å–∞–º—É—é —è—Ä–∫—É—é —Ö–∏–º–∏—é ‚ö°"

            # ü™û –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            lines = [
                f"üíû <b>{res['a']}</b> + <b>{res['b']}</b>",
                f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>{res['matches']}</b> –∏–∑ {res['total']} ‚Äî <b>{res['pct']}%</b>","",
                summary
            ]

            bad = [p for p in res["pairs"] if not p["ok"]]
            if bad:
                lines.append("\nüîç –ì–¥–µ –Ω–µ —Å–æ–≤–ø–∞–ª–æ:")
                for p in bad[:5]:
                    lines.append(f"‚Ä¢ <b>{p['q']}</b>\n  ‚Äî {res['a']}: {p['a_opt']}\n  ‚Äî {res['b']}: {p['b_opt']}")

            await bot.send_message(chat_id, "\n".join(lines))
        else:
            await bot.send_message(chat_id, "üëå –ì–æ—Ç–æ–≤–æ! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞‚Ä¶")
        return

    q = questions[idx]
    await bot.send_message(chat_id, f"<b>{emojify(q['question'], idx)}</b>", reply_markup=kb_answers(idx, q["options"], code, role_key))

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
@dp.message(CommandStart())
async def on_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! ü•∞ –≠—Ç–æ —Ç–µ—Å—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –û–¥–∏–Ω –∏–∑ –≤–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º, –¥—Ä—É–≥–æ–π ‚Äî –≤—Ç–æ—Ä—ã–º. –ö—Ç–æ —Ç—ã?", reply_markup=kb_start())
    await state.set_state(Flow.role)

@dp.callback_query(F.data.startswith("role:"))
async def choose_role(cb: types.CallbackQuery, state: FSMContext):
    role = cb.data.split(":")[1]
    await cb.message.edit_reply_markup(reply_markup=None)
    if role == "first":
        await state.update_data(role="first", role_key="a")
        await cb.message.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(Flow.name)
    else:
        await state.update_data(role="second", role_key="b")
        await cb.message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–¥ –ø–∞—Ä—ã (4 —Ü–∏—Ñ—Ä—ã):")
        await state.set_state(Flow.code)
    await cb.answer()

@dp.message(Flow.code)
async def input_code(message: types.Message, state: FSMContext):
    code = re.sub(r"\D+", "", message.text or "")
    if len(code) != 4:
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôÇ")
        return
    ensure_session(code)
    await state.update_data(code=code)
    await message.answer("üí¨ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Flow.name)

@dp.message(Flow.name)
async def input_name(message: types.Message, state: FSMContext):
    name = (message.text or "").strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    data = await state.get_data()
    role = data.get("role", "first")
    role_key = data.get("role_key", "a")

    code = data.get("code")
    if role == "first":
        code = gen_code()
        await state.update_data(code=code)

    ensure_session(code)
    sessions[code][role_key]["name"] = name

    if role == "first":
        await message.answer(f"üîê –¢–≤–æ–π –∫–æ–¥: <b>{code}</b>\n–ü–µ—Ä–µ–¥–∞–π –µ–≥–æ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É üíå")
    else:
        await message.answer(f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç: <b>{code}</b>")

    await send_question(message.chat.id, code, role_key, 0)
    await state.set_state(Flow.idx)

@dp.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: types.CallbackQuery, state: FSMContext):
    try:
        _, code, role_key, qidx, opt_idx = cb.data.split(":")
        qidx, opt_idx = int(qidx), int(opt_idx)
    except Exception:
        await cb.answer()
        return

    ensure_session(code)
    answers = sessions[code][role_key]["answers"]
    if len(answers) == qidx:
        answers.append(opt_idx)
    elif len(answers) > qidx:
        answers[qidx] = opt_idx

    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.answer("‚úÖ")

    await send_question(cb.message.chat.id, code, role_key, qidx + 1)

# ---------- Webhook ----------
async def on_startup(bot: Bot):
    try:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    except Exception:
        pass

async def on_shutdown(bot: Bot):
    try:
        await bot.delete_webhook()
    except Exception:
        pass

def build_app() -> web.Application:
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    app = build_app()
    web.run_app(app, host="0.0.0.0", port=PORT)
